-- VHDL Entity My_Lib.avg_four.symbol
--
-- Created:
--          by - mg30.bin (srge01.ecn.purdue.edu)
--          at - 21:10:15 09/17/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2011.1 (Build 18)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY avg_four IS
   PORT( 
      clk           : IN     std_logic;
      nReset        : IN     std_logic;
      sample_data          : IN     std_logic_vector (15 DOWNTO 0);
      data_ready             : IN     std_logic;
      one_k_samples : OUT    std_logic;
      modwait       : OUT    std_logic;
      avg_out       : OUT    std_logic_vector (15 DOWNTO 0);
      err           : OUT    std_logic
   );

-- Declarations

END avg_four ;

--
-- VHDL Architecture My_Lib.avg_four.struct
--
-- Created:
--          by - mg30.bin (srge01.ecn.purdue.edu)
--          at - 21:10:15 09/17/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2011.1 (Build 18)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.STD_LOGIC_UNSIGNED.all;
LIBRARY ECE337_IP;
USE ECE337_IP.all;

--LIBRARY My_Lib;

ARCHITECTURE struct OF avg_four IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A_sync : std_logic;
   SIGNAL V      : std_logic;
   SIGNAL cnt_up : std_logic;
   SIGNAL dest   : std_logic_vector(3 DOWNTO 0);
   SIGNAL op     : std_logic_vector(1 DOWNTO 0);
   SIGNAL outreg : std_logic_vector(15 DOWNTO 0);
   SIGNAL src1   : std_logic_vector(3 DOWNTO 0);
   SIGNAL src2   : std_logic_vector(3 DOWNTO 0);


   -- Component Declarations
   COMPONENT datapath
   PORT (
      src1      : IN     std_logic_vector (3 DOWNTO 0);
      src2      : IN     std_logic_vector (3 DOWNTO 0);
      dest      : IN     std_logic_vector (3 DOWNTO 0);
      clk    : IN     std_logic;
      ext_data   : IN     std_logic_vector (15 DOWNTO 0);
      nReset : IN     std_logic;
      op     : IN     std_logic_vector (1 DOWNTO 0);
      overflow     : OUT    std_logic;
      outreg_data : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT controller
   PORT (
      clk      : IN     std_logic;
      dr       : IN     std_logic;
      nReset   : IN     std_logic;
      overflow : IN     std_logic;
      cnt_up   : OUT    std_logic;
      dest     : OUT    std_logic_vector (3 DOWNTO 0);
      err      : OUT    std_logic;
      modwait  : OUT    std_logic;
      op       : OUT    std_logic_vector (1 DOWNTO 0);
      src1     : OUT    std_logic_vector (3 DOWNTO 0);
      src2     : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT counter
   PORT (
      clk           : IN     std_logic;
      cnt_up        : IN     std_logic;
      nReset        : IN     std_logic;
      one_k_samples : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT sync
   PORT (
      A      : IN     std_logic;
      clk    : IN     std_logic;
      nReset : IN     std_logic;
      A_sync : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
 --  FOR ALL : controller USE ENTITY My_Lib.controller;
 --  FOR ALL : counter USE ENTITY My_Lib.counter;
   FOR ALL : datapath USE ENTITY ECE337_IP.datapath;
 --  FOR ALL : sync USE ENTITY My_Lib.sync;


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1        
   avg_out <= "00" & outreg(15 downto 2);                        


   -- Instance port mappings.
   U_3 : datapath
      PORT MAP (
         clk    => clk,
         nReset => nReset,
         src1      => src1,
         src2      => src2,
         dest      => dest,
         ext_data   => sample_data,
         op     => op,
         overflow      => V,
         outreg_data => outreg
      );
   U_0 : controller
      PORT MAP (
         clk      => clk,
         nReset   => nReset,
         dr       => A_sync,
         overflow => V,
         cnt_up   => cnt_up,
         modwait  => modwait,
         op       => op,
         src1     => src1,
         src2     => src2,
         dest     => dest,
         err      => err
      );
   U_1 : counter
      PORT MAP (
         clk           => clk,
         nReset        => nReset,
         cnt_up        => cnt_up,
         one_k_samples => one_k_samples
      );
   U_2 : sync
      PORT MAP (
         clk    => clk,
         nReset => nReset,
         A      => data_ready,
         A_sync => A_sync
      );

END struct;
